% import librarypkg load image;img = imread('tree.jpg');img = rgb2gray(img);imshow(img);% adding noise to imagesigma = 20;noise = randn(size(img)) .* sigma;img_noisy = img + noise;imshow(img_noisy);% moving average filters f_3 = fspecial('average', 3);f_10 = fspecial('average', 10);% adding noise to sine wavex = linspace(0, 20, 1000);sin_x = sin(x);noise = randn(size(sin_x)) .* 0.05;sin_x_noisy = sin_x + noise;% moving average filter on sin wavesin_x_filtered_10 = imfilter(sin_x_noisy, f_10);sin_x_filtered_3 = imfilter(sin_x_noisy, f_3);plot(  x, sin_x_filtered_10, 'r',  x, sin_x_filtered_3, 'g',  x, sin_x_noisy, 'b');title('effect of moving average filter on noisy sine wave');xlabel('x');ylabel('sin(x)');legend (  'moving average with window size 10',   'moving average with window size 3',  'noisy sin(x)');% moving average filter on imageimg_filtered_3 = imfilter(img_noisy, f_3);img_filtered_10 = imfilter(img_noisy, f_10);x = linspace(100, 200, 101);plot(  x, img_filtered_10(10, 100:200), 'r',   x, img_filtered_3(10, 100:200), 'g',   x, img_noisy(10, 100:200), 'b');title('plot over column range [100, 200] for row 10');xlabel('column');ylabel('pixel intensity');legend (  'moving average with window size 10',   'moving average with window size 3',  'noisy image');w = size(img)(2);x = linspace(0, w, w);plot(  x, img_filtered_10(100, :), '+',   x, img_filtered_3(100, :), '.',   x, img_noisy(100, :), '*');title('plot for row 100');xlabel('column');ylabel('pixel intensity');legend (  'moving average with window size 10',   'moving average with window size 3',  'noisy image');% weighted moving average for 1D% assuming weights to be an odd sized vectorfunction result = weighted_moving_average(series, weights)  size_weights = size(weights)(2);  size_series = size(series)(2);  padding = zeros(1, size_weights/2);  size_padding = size(padding)(2);  series_padded = [padding, series, padding];  for idx = (size_padding + 1) : (size_series + size_padding)    series(idx-size_padding) = mean(      series_padded(idx-size_padding: idx-size_padding+size_weights-1)        ./sum(weights)        .*weights);  endfor  result = series;endfunction% weighted moving average over a random vectorn = 3;x = linspace(1, n, n*10);sin_x = sin(x);noise = randn(1, n*10) .* 0.1;sin_x = noise + sin_x;% uniform weightsweights = [1, 1, 1, 1, 1];sin_x_mov_avg = weighted_moving_average(sin_x, weights);% center biased weightsweights = [1, 2, 4, 2, 1];sin_x_wgt_avg = weighted_moving_average(sin_x, weights);plot(  x, sin_x_mov_avg .* 5, 'r',  x, sin_x_wgt_avg .* 5, 'b',  x, sin_x, 'g');title('moving average vs weighted moving average');xlabel('x');ylabel('sin(x)');legend('moving average', 'weighted moving average', 'noisy sin(x)');% function to plot with labels% reference: % https://in.mathworks.com/matlabcentral/answers/% 154877-how-to-plot-a-10-10-grid-map-and% -how-to-number-the-grid-cells-sample-pic-is-attached-herefunction plot_with_labels(matrix, color='white')  size_x = size(matrix, 1);  size_y = size(matrix, 2);  imagesc(matrix);  hold on;  [X Y] = meshgrid(1:size_x, 1:size_y);  string = mat2cell(transpose(matrix), ones(size_x, 1), ones(1, size_y));  text(    Y(:)-.45,X(:)+.15,    string,    'HorizontalAlignment','left',     'VerticalAlignment', 'middle',    'color', color,    'fontsize', 12);  grid_x = .5:1:(size_x + .5);  grid_y = .5:1:(size_y + .5);  grid1 = [grid_x;grid_y];  grid2 = repmat([.5;size_x + .5],1,length(grid_x));  plot(grid1,grid2,'k');  plot(grid2,grid1,'k');endfunction% moving average in 2Dimg = zeros(10, 10);img(3:7, 4:8) = 90;img(6, 5) = 0;img(9, 3) = 90;f_3 = fspecial('average', 3);f_5 = fspecial('average', 5);subplot(3, 1, 1);plot_with_labels(img);title('original noisy image');img_3 = imfilter(img, f_3);subplot(3, 1, 2);plot_with_labels(img_3);title('image after average filter with window size 3');img_5 = imfilter(img, f_5);subplot(3, 1, 3);plot_with_labels(img_5);title('image after average filter with window size 5');% smoothness of filtersf_average = fspecial('average', 2);f_smooth = fspecial('gaussian', 7, 1);img = zeros(11, 11);img(6,6) = 90;img_average = imfilter(img, f_average);img_smooth = imfilter(img, f_smooth);subplot(2, 2, 1);surf(f_average);title('surface plot of average filter');subplot(2, 2, 2);surf(f_smooth);title('surface plot of guassian filter');subplot(2, 2, 3);imagesc(img_average);title('image after average filtering of a dot');subplot(2, 2, 4);imagesc(img_smooth);title('image after guassian filtering of a dot');% comparison of sigmaf_gaussian_10 = fspecial('gaussian', 100, 10);f_gaussian_20 = fspecial('gaussian', 100, 20);subplot(2, 1, 1);surf(f_gaussian_10);title('plot with sigma = 10');subplot(2, 1, 2);surf(f_gaussian_20);title('plot with sigma = 20');% same sigma in varying size matrixf_gaussian_50 = fspecial('gaussian', 50, 10);f_gaussian_20 = fspecial('gaussian', 20, 10);subplot(2, 1, 1);surf(f_gaussian_10);title('plot with matrix side 50');subplot(2, 1, 2);surf(f_gaussian_20);title('plot with matrix side 20');% the two sigmasimg = rgb2gray(imread('tree.jpg'));img_1 = img + randn(size(img)) .* 10;img_2 = img + randn(size(img)) .* 100;img_3 = img + randn(size(img)) .* 500;subplot(3, 3, 1);imshow(img_1);subplot(3, 3, 2);imshow(img_2);subplot(3, 3, 3);imshow(img_3);f_1 = fspecial('gaussian', 7, 3);img_1_1 = imfilter(img_1, f_1);img_2_1 = imfilter(img_2, f_1);img_3_1 = imfilter(img_3, f_1);subplot(3, 3, 4);imshow(img_1_1);subplot(3, 3, 5);imshow(img_2_1);subplot(3, 3, 6);imshow(img_3_1);f_2 = fspecial('gaussian', 7, 5);img_1_2 = imfilter(img_1, f_2);img_2_2 = imfilter(img_2, f_2);img_3_2 = imfilter(img_3, f_2);subplot(3, 3, 7);imshow(img_1_2);subplot(3, 3, 8);imshow(img_2_2);subplot(3, 3, 9);imshow(img_3_2);